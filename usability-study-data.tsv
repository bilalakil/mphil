Row ID	Course Code	Programming Experience Years	Shell Experience	Java Experience	Python Experience	A1 Language Used	A1 SUS Q1	A1 SUS Q2	A1 SUS Q3	A1 SUS Q4	A1 SUS Q5	A1 SUS Q6	A1 SUS Q7	A1 SUS Q8	A1 SUS Q9	A1 SUS Q10	A1 Feedback	A1 Time Spent	A2 System Used	A2 Language Used	A2 SUS Q1	A2 SUS Q2	A2 SUS Q3	A2 SUS Q4	A2 SUS Q5	A2 SUS Q6	A2 SUS Q7	A2 SUS Q8	A2 SUS Q9	A2 SUS Q10	A2 Feedback	A2 System Preference	A2 Time Spent	A3 System Used	A3 Language Used	A3 SUS Q1	A3 SUS Q2	A3 SUS Q3	A3 SUS Q4	A3 SUS Q5	A3 SUS Q6	A3 SUS Q7	A3 SUS Q8	A3 SUS Q9	A3 SUS Q10	A3 Feedback	A3 System Preference	A3 Time Spent
1	M.DS.	5	4	2	4	Python	4	1	3	0	3	1	2	1	4	2		6	Spark	Python	3	1	3	1	3	1	2	1	3	1		Spark	5	Flink	Java	3	1	2	1	3	1	2	1	3	1		Flink	7
2	B.E.	4	3	3	2	Java	2	1	2	3			1	2	1	3		4	Flink	Java	2	0	3	1	3	1	2	2	2	2		Flink	4	Spark	Java	2	2	2	3	2	3	1	3	1	2		Flink	4
3	M.DS.	1	2	2	3	Python	3	2	2	3	3	1	2	3	2	3		7	Flink	Java	1	1	3	1	3	1	3	1	3	3	Difficult to set up for IDE. No python support :( Otherwise, relatively easy to use.	Flink	6	Spark	Python	2	1	2	1	3	1	2	1	2	2		Flink	
4	M.I.T.	1	1	3	2	Java	2	1	3	2	3	1	3	0	3	3		7	Flink	Java	2	1	1	2	3	1	1	4	3	4	Online documentation is rather limited aside from the official documentations from Apache. Required a lot of trial and error.	Flink	11	Spark	Java	0	3	0	3	1	2	1	4	0	4	Aside from the difficulty experienced with attempting to develop the apriori algorithm, the framework was rather confusing to work with.	Flink	13
5	M.I.T.	2	3	2	4	Python	2	3	2	2	3	3	2	1	2	3		4	Flink	Java	1	3	2	3	2	3	1	3	1	3		Hadoop MapReduce	8	Spark	Java	1	3	1	3	2	3	1	2	1	4		Hadoop MapReduce	8
6	B.E.	4	3	4	2	Java	3	1	3	3	2	2	2	1	3	3		4	Flink	Java	3	1	1	3	2	1	1	2	2	3		Flink	3	Spark	Java	3	1	2	3	2	2	1	3	2	3		Flink	4
7	M.I.T.,M.I.T.M.	1	3	3	3	Java	3	2	1	3	3	3	1	1	2	3	none	7	Spark	Java	2	2	3	3	3	2	1	2	1	3	none	Spark	13	Flink	Java	2	2	2	3	2	2	1	2	1	3	none	Flink	13
8	M.I.T.	1	2	1	3	Python	0	3	1	3	1	2	1	3	3	3		7	Flink	Java	3	1	3	3	3	1	3	1	3	1	support more language -- such as  scala	Flink	7	Spark	Java	3	1	3	3	3	1	3	1	3	1		Spark	7
9	M.I.T.,M.I.T.M.	5	3	4	3	Java	2	1	1	3	3	1	0	1	3	3	A better GUI may be helpful.	5	Flink	Java	2	2	2	3	4	1	1	2	3	3		Flink	3	Spark	Java	2	2	2	2	3	1	1	2	3	3	None.	Spark	3
10	M.I.T.,M.I.T.M.	8	3	4	3	Java	4	1	3	1	2	1	2	1	3	1		3	Spark	Java	4	1	3	1	3	1	2	1	3	2		Spark	3	Flink	Java	3	3	2	3	1	1	1	3	1	3		Spark	4
11	B.I.T./B.Com.	4	4	4	3	Python	1	2	2	2	2	3	1	2	2	3			Spark	Python	3	2	3	1	3	2	2	1	3	4		Spark	5	Flink	Java	0	4	0	3	1	4	0	4	0	4	Spark > Flink	Spark	3
12	M.I.T.	3	4	4	3	Java	3	1	3	1	2	1	0	2	2	3	The requirement is far from sufficiently detailed	7	Flink	Java	3	1	3	1	3	1	2	1	2	1		Flink	4	Spark	Java	2	0	3	1	3	1	3	1	2	1		Spark	6
13	M.I.T.,M.I.T.M.	5	2	2	1	Python	2	1	1	3	2	2	3	2	1	3	No	7	Spark	Python	2	2	1	3	3	3	1	2	1	2	No	Hadoop MapReduce	10	Flink	Java	2	2	1	2	3	2	2	2	2	2	No	Hadoop MapReduce	11
14	M.DS.	1	2	2	3	Java	4	1	4	4	3	2	1	1	3	3		7	Flink	Java	3	2	3	3	2	1	1	2	3	2		Flink	13	Spark	Java	2	2	2	4	1	3	0	2	2	4	The algorithm required to be implemented in assignment3 is quiet computation intensive. And there are small number of result we can get especially in task2 and task3. Besides, as a student, I hope I can have some standard result(not all) to check whether  we write the correct logics in our code for this assignment.	Flink	13
15	M.I.T.,M.I.T.M.	3	3	2	4	Java	3	2	3	3	3	1	2	2	3	2	all good	7	Spark	Python	4	2	3	3	3	1	3	1	3	2	all good	Spark	8	Flink	Java	3	1	3	3	3	1	3	1	3	3	all good	Spark	9
16	B.I.T./B.A.	3	4	3	4	Python	2	1	1	3	2	1	1	2	2	3	The lack of documentation for Hadoop Streaming was remarkable. 	6	Flink	Java	3	1	3	1	2	1	3	1	3	3		Flink	9	Spark	Python	2	1	3	3	1	3	1	3	3	4	The conceptof RDDs in Spark presented the biggest conceptual hurdle and reuqired a lot of trial and error. 	Flink	10
17	M.I.T.	6	3	3	3	Java	4	1	2	4	3	2	2	1	2	3	Requirements can be more exhaustive so that minimum late stage changes to the code is required.	7	Spark	Java	3	1	4	3	3	1	2	1	2	4		Spark	9	Flink	Java	3	2	3	3	3	2	3	1	2	3	It took a long time for me to comprehend the concept of iterative dataset.	Flink	11
18	M.I.T.,M.I.T.M.	3	1	2	2	Java	2	2	1	3	2	1	1	2	2	4		3	Flink	Java	3	1	3	3	3	1	3	1	3	3		Flink	10	Spark	Java	3	1	3	3	3	1	2	1	3	3		Flink	7
19	M.I.T.,M.I.T.M.	1	2	3	2	Java	2	2	1	2	2	1	2	2	2	2		7	Flink	Java	3	1	3	2	3	2	3	2	2	3		Flink	9	Spark	Java	1	3	1	3	2	1	3	2	2	3		Flink	13
20	M.I.T.,M.I.T.M.	2	2	3	1	Java	2	2	1	4	3	1	2	3	1	3	I met some difficulties to complete the assignment, and I can`t get too much help from my partner. So I think I need spend more time to review the recording and read the related materials. 	7	Flink	Java	3	2	2	2	3	2	2	1	2	3	I can not get enough help from my partner... 	Flink	9	Spark	Java	2	2	2	3	3	2	2	3	1	4	I just write the code by myself. I cannot get help form my partner	Flink	9
21	M.I.T.,M.I.T.M.	1	2	3	1	Java	3	2	2	1	2	2	3	3	2	4		7	Spark	Java	3	1	3	2	3	1	2	1	2	2		Spark	6	Flink	Java	2	3	1	3	2	2	2	3	1	2		Spark	8
22	M.I.T.,M.I.T.M.	4	3	3	2	Java	2	3	2	3	1	1	1	3	1	3	I think that this system is too abstract and has a lot things to learn	6	Spark	Java	3	1	2	3	3	1	1	2	2	3		Spark	13	Flink	Java	3	1	1	3	3	1	2	1	3	4		Flink	11
23	M.I.T.,M.I.T.M.	4	3	4	3	Java	1	2	1	2	2	4	1	2	2	3	I think that this system is too abstract and has a lot things to learn	7	Spark	Java	3	2	3	1	1	3	1	2	2	3	Spark had poor documentation with Java API, Also, API is inconsistence through different versions. Need to look at proper documentation with right version of Spark.	Spark	4	Flink	Java	2	2	3	1	2	1	1	2	2	3	There were 2 hinders for using flink system. 1. establishing the development environment. This is due to flink requires to know the data type of returns. It says compiling with ant doesn't let the system know the return type. Therefore, it requires to build it with maven.It gives some trouble with building with maven. There was no exact documentation about how to make pom.xml. 2. well structured first party documentation, but less information on third party side.  When I did the assignment with spark, it was reserved situation. Flink has good documentation on first party side, including javadoc. However, unlike the spark, the information on third party side, such as Stack Overflow is limited.Also, I had trouble with finding a example code of using some of method provided by Flink. 	Spark	6
24	M.I.T.,M.I.T.M.	1	2	2	3	Python	2	4	1	3	2	3	0	2	2	4		6	Flink	Java	3	1	3	2	3	1	3	1	3	3		Flink	4	Spark	Java	1	2	1	3	1	3	1	3	1	4		Flink	9
25	M.I.T.,M.I.T.M.	0	4	1	3	Python	4	0	4	1	3	1	2	1	3	3		7	Spark	Python	3	2	3	1	3	2	3	1	2	1		Spark	10	Flink	Java	2	2	2	1	3	1	2	1	3	3		Spark	9
26	M.I.T.,M.I.T.M.	1	2	3	1	Java	2	1	3	3	2	1	2	1	2	3	No	6	Spark	Java	2	3	3	3	2	1	1	1	2	3	No	Spark	7	Flink	Java	2	2	2	3	2	2	1	2		3	no	Flink	8
27	M.I.T.	8	4	5	3	Java	3	2	3	0	3	2	1	1	4	3	Being able to run Hadoop locally (libraries loaded into an IntelliJ project for a single-node implementation, an Ubuntu virtual machine running a pseudo-distributed cluster for more robust testing) has been a massive boon to my understanding of how it operates, as well as making development far easier with integrated debugging and zero-time deployment. Taking the time to instruct students on these techniques might aid their understanding of the framework as a whole.	4	Spark	Java	4	1	3	0	3	1	2	0	4	3		Spark	2	Flink	Java	2	3	1	0	0	1	1	3	2	4	I definitely felt like I was fighting the API on this one. Particularly the way they have decided to embrace static typing, to the point they ran into generic type erasure and instead of dealing with it properly, tried to undo it with embedded class info and type hinting. Spark doesn't seem to need to worry about static typing, why is Flink so hamstrung by the lack of it? Very strange. The framework definitely needs some work in terms of what it supports, particularly whether it wants everything as Tuples, or if it can handle other data types, as well as being internally consistent as to what operations work on what classes. More than once I went through the patchwork documentation (which is an issue all its own) to find comments like 'this operator requires Tuples, this restriction will be removed in the future' or even documentation-via-exception as I encountered in task 3 'The only operations allowed on the solution set are Join and CoGroup'.	Spark	5
28	B.I.T.(Hons)	3	3	4	5	Python	4	3	3	1	3	0	1	1	3	1		3	Spark	Python	4	3	3	2	4	0	4	1	4	1		Spark	2	Flink	Java	1	1	1	4	2	1	0	4	1	3	Flink was really, really hard to use. Additionally, Flink had an example for k-means clustering which gives students who did assignment 2 a major advantage over us.	Spark	5
29	M.P.E.	5	3	4	1	Java	2	3	2	3	3	2	1	3	3	3		4	Spark	Java	1	3	1	3	3	2	1	2	2	3		Hadoop MapReduce	10	Flink	Java	2	2	3	3	3	1	2	2	2	3		Flink	4
30	M.DS.	3	2	5	3	Java	2	2	2	2	3	1	1	2	2	3		3	Flink	Java	2	1	2	2	2	2	1	1	2	3		Flink	3	Spark	Python	2	2	2	2	3	1	2	2	2	3		Flink	3
31	M.I.T.	3	2	2	3	Python	4	0	3	3	2	1	2	1	3	4	This system is becoming more and more important and useful. Learning it well is good for our career in the future.	7	Spark	Python	3	2	2	3	3	2	1	2	1	3	I'm not sure how to use it efficiently. And the RDD is interesting.	Spark	13	Flink	Java	2	3	3	2	1	1	1	3	1	3	the flink is more complex than spark	Spark	7
32	M.I.T.	3	3	3	3	Java	3	3	3	2	3	2	3	1	2	2	if  there will be a tutorial on how to set up a Hadoop development environment based on eclipse windows and Linux would be good	7	Spark	Python	4	3	3	3	3	2	3	2	3	2	Not too much things need to learn,	Spark	6	Flink	Java	3	2	2	4	1	3	2	2	2	4	It is a bit ridiculous for using flink. some functions of Flink are not direct. for examples/ if I want to use collect() to save a dataset as a list.,  I can only use this function on a small dataset. if I want to use this function on a large dataset , the code will stop running. but the flink doc didn't mention  this. Iteration mode of flink also dont have many details . 	Spark	13
33	M.I.T.,M.I.T.M.	1	4	3	1	Java	3		2	1	2	3	2	1	3	2	I feel that MapReduce is easy to understand on a high level and gets a bit confusing while programming Joins. 	7	Flink	Java	4	1	3	1	3	1	4	1	3	3		Flink	3	Spark	Python	3	1	3	1	4	0	3	2	3	3		Flink	7
34	M.I.T.	6	2	2	3	Python	3	2	2	3	3	1	1	2	1	4		7	Flink	Java	2	2	1	3	3	1	1	2	2	3		Hadoop MapReduce	13	Spark	Java	3	1	3	2	4	1	3	1	2	1		Hadoop MapReduce	7
35	M.I.T.	4	3	3	3	Java	3	2	2	1	2	2	2	2	4	2		6	Spark	Python	3	2	2	2	2	2	2	2	2	2		Spark	4	Flink	Java	1	3	2	4	2	4	2	2	2	2		Spark	5
36	M.I.T.,M.I.T.M.	1	2	3	2	Java	2	1	3	2	3	2	1	1	2	2	Easier access to read the pre-written packages  source codes.and	7	Spark	Java	2	1	3	2	3	2	3	1	3	3		Spark	6	Flink	Java	2	2	1	3	2	2	2	2	3	3	Flink performs very good when dealing with some common functions. But when we are trying to do things like iteration or broadcast dataset, I think the supports are not enough.	Spark	7
37	M.I.T.,M.I.T.M.	0	2	2	2	Java	2	2	2	3	2	2	3	2	3	2	NO	3	Spark	Java	2	2	2	2	2	2	2	2	2	2		Spark	5	Flink	Java	2	2		2	2	2	2	2	2	2	NO	Spark	4
38	M.I.T.	10	3	1	3	Java	4	0	3	0	2	2	2	2	2	3		6	Flink	Java	2	2	2	0	0	4	3	3	2	2		Flink	3	Spark	Python	2	2	2	2	2	2	2	2	2	2		Spark	13
39	M.I.T.,M.I.T.M.	3	3	4	2	Java	2	2	2	3	1	1	1	1	2	4		7	Spark	Java	2	2	2	3	3	1	1	1	2	3	I felt for doing simple mapping, reducing and aggregating a lot of documentation was available, but for more complex processing there wasn't enough documentation for spark. For example I wanted to sort an RDD by value, for this i could only find documentation for sortbykey function in java. So i ended up swapping the keys and values and then sorting. I am sure this is not the right approach, but I couldn't find any other approach.	Spark	3	Flink	Java	3	1	3	3	2	2	2	1	3	1		Flink	4
40	M.I.T.,M.I.T.M.	5	2	3	1	Java	3	2	1	3	3	2	1	2	2	3	Hadoop MapReduce has a great power for process the data, but using Hadoop MapReduce wasn’t easy for me, before I program the task1 I read the Hadoop definition wrote by tom to found out what MapReduce work and learn how to write the drive code. Although we have some example code and most job I just need to change partly code to fulfil the task, is hard to clear the logic relationship between the data and find an efficient way to process the data. Also I found out a big problem when I programming that if there are bugs in my program I don’t have a efficient way to solve it. So I think in the tutorial section the tutor can teach our a way to run the program by special application like we running java code using the eclipse.  	7	Spark	Java	2	2	1	3	3	2	3	1	2	3	because i have the sample code from tutorial so it help me to learn how to use spark, so that is great but without the sample code, it will take me more time	Spark	2	Flink	Java	2	1	3	2	3	1	2	3	2	3		Spark	4
41	M.DS.	1	2	2	3	Python	2	2	2	2	2	3	2	2	2	3	Very hard for students who was majored in non IT related major. 	7	Flink	Java	1	3	2	2	2	2	2	2	2	2	Environment setup is time consuming and hope it to be simplified.	Hadoop MapReduce	7	Spark	Java	2	3	2	4	2	3	2	2	2	3	I needed to learn a lot of things before I could get going with this  system.	Hadoop MapReduce	7
42	M.I.T.	0	2	3	2	Java	4	0	1	4	4	3	2	2	3	3	The assignment requirements should be more accurate and deliverable enough for students to handle. Many items inside the assignment sheets are vague and can be considered in multiple ways while the criteria is not.	7	Spark	Java	4	0	4	1	2	1	2	0	4	3		Spark	7	Flink	Java	3	1	2	4	3	1	1	3	3	3		Flink	8
43	M.DS.	10	3	3	4	Python	3	2	2	3	3	1	2	1	3	2		5	Spark	Python	3	1	3	3	3	3	3		3	2		Spark	3	Flink	Java	3	1	2	3	2	1	2	2	3	2		Spark	4
44	M.I.T.,M.I.T.M.	2	3	4	2	Java	0	4	1	3	1	3	0	2	1	3		7	Spark	Java	3	2	3	2	3	1	2	1	3	3	I think Spark	Spark	6	Flink	Java	3	1	3	2	3	2	2	1	3	3		Flink	5
45	M.I.T.,M.I.T.M.	3	3	3	1	Java	3	1	3	1	3	1	3	1	3	3		7	Flink	Java	3	1	3	1	3	1	3	1	3	3		Flink	7	Spark	Python	3	1	3	2	3	1	3	1	3	2		Flink	5
46	M.DS.	1	2	1	2	Python	3	1	2	3	3	1	1	1	2	3	No	7	Flink	Java	3	1	2	3	3	1	1	1	2	3	No	Flink	10	Spark	Java	3	2	2	3	2	2	2	2	3	3	No	Flink	9
47	M.I.T.,M.I.T.M.	1	2	2	3	Python	3	3	3	2	3	1	3	1	2	3		4	Spark	Python	2	2	2	3	1	3	1	2	2	2		Spark	4	Flink	Java	1	4	0	3	1	2	0	4	1	3		Spark	6
48	M.I.T.,M.I.T.M.	1	2	2	2	Java	3	3	1	3	2	3	1	3	1	3	I think the development in this system is quite mature in Java but not so mature in Python	7	Spark	Python	3	2	2	3	3	1	1	3	2	4	Spark is much easier to use than Hadoop, though actually they share the same theory.	Spark	13	Flink	Java	3	2	1	3	3	2	1	2	1	1	The assignment cost more time than the former one. We finished it very quickly, however, used a lot of time for optimizing to make it time-saving.	Spark	10
49	M.I.T.	2	3	3	3	Python	2	2	2	2	2	2	2	2	2	2		2	Spark	Python	2	2	2	2	2	2	2	2	2	2	None	Spark	4	Flink	Java	2	2	2	2	2	2	2	2	2	2		Flink	3
50	M.I.T.,M.I.T.M.	3	1	2	3	Python	1	3	1	4	2	2	1	2	2	4		7	Flink	Java	4	1	3	2	4	1	4	1	3	3		Flink	13	Spark	Java	2	2	1	3	3	3	2	3	2	4		Flink	13
51	M.I.T.	1	3	3	3	Java	1	3	2	3	2	1	1	2	2	2		7	Spark	Python	3	1	3	2	3	1	3	1	3	1		Spark	6	Flink	Java	1	3	1	3	2	2	1	2	2	3		Spark	9
52	M.I.T.,M.I.T.M.	4	3	3	3	Java	3	2	3	1	4	1	3	3	4	4		4	Spark	Java	2	3	3	3	1	2	1	2	3	2		Hadoop MapReduce	12	Flink	Java	2	2	2	2	3	1	2	1	3	3		Hadoop MapReduce	4
53	M.I.T.	1	3	4	2	Java	2	1	3	1	3	2	2	1	3	1		3	Flink	Java	2	1	2	2	3	3	0	2	2	2		Hadoop MapReduce	6	Spark	Java	2	2	2	2		2	2	2	1	3		Spark	13
54	M.I.T.	3	3	2	4	Java	3	1	2	2	3	1	2	1	3	4		5	Spark	Java	3	1	3	2	3	1	2	2	2	3		Spark	7	Flink	Java	3	1	2	3	3	1	2	1	3	3		Flink	7
55	M.I.T.,M.I.T.M.	2	3	3	3	Python	3	1	3	3	3	1	3	3	3	3		5	Flink	Java	3	1	3	3	3	1	3	2	3	3		Flink	4	Spark	Python	3	1	3	3	3	3	3	3	3	3		Spark	6
56	B.I.T./B.A.	5	4	4	4	Python	3	1	3	2	1	1	1	3	3	3	Python implementation was fairly difficult to learn, with limited verbosity in errors	5	Flink	Java	3	1	3	2	3	1	3	2	2	3		Flink	6	Spark	Python	1	2	3	3	3	1	1	3	2	3	Iteration is much easier on flink	Flink	10
57	M.I.T.	2	2	3	2	Java	3	1	3	3	3	1	1	1	1	3		4	Flink	Java	2	1	3	4	3	1	2	2	0	4		Hadoop MapReduce	9	Spark	Java	2	2	1	4	3	1	0	2	1	3		Hadoop MapReduce	13
58	M.I.T.,M.I.T.M.	2	2	4	1	Java	4	2	1	4	4	1	1	3	2	4	Need more practice assignment before coding the real assignments that matter.	3	Spark	Java	3	3	1	3	2	3	1	2	1	4		Spark	5	Flink	Java	3	1	2	3	3	3	2	1	2	4		Flink	6
59	M.I.T.	1	3	3	3	Java	3	2	2	3	2	2	1	2	2	4		6	Spark	Java	3	1	2	2	3	1	2	1	3	3		Spark	4	Flink	Java	2	1	1	3	2	2	1	3	2	3		Spark	6
60	M.I.T.,M.I.T.M.	4	3	2	3	Java	3	1	3	3	3	1	1	1	2	3		7	Spark	Java	2	3	3	2	1	3	3	3	3	3		Hadoop MapReduce	12	Flink	Java	3	2	3	3	3	2	2	2	3			Hadoop MapReduce	13
61	M.I.T.,M.I.T.M.	2	2	3	2	Java	2	2	3	3	3	3	2	3	2	2		7	Flink	Java	3	2	3	2	3	3	2	1	2	3		Flink	13	Spark	Java	3	2	3	3	3	3	3	2	3	3	the algorithm in Assignment 3 is more complex than the algorithm in Assignment 2. thus, it is difficult tell which i prefer better, i think these two system are similar 	Flink	13
62	M.I.T.	1	2	1	3	Python	3	2	3	2	3	1	3	1	2	3	This system is not easy to find problems.	5	Spark	Python	3	1	3	4	2	2	3	2	3	2		Spark	7	Flink	Java	1	3	1	4	2	2	1	3	1	3		Spark	9
63	M.I.T.	1	1	2	1	Java	3	2	3	2	2	1	2	1	2	1		4	Flink	Java	3	2	2	3	3	1	3	1	2	3		Flink	10	Spark	Java	3	1	3	3	3	1	2	1	2	2		Spark	6
64	M.I.T.,M.I.T.M.	2	2	3	1	Java	1	3	1	2	2	2	1	3	2	3		7	Spark	Java	1	3	1	2	2	2	1	3	2	3		Spark	13	Flink	Java	2	2	2	2	2	2	2	2	2	3		Flink	13
65	M.I.T.	2	2	4	1	Java	1	2	2	4	2	3	2	3	1	4		7	Flink	Java	2	1	3	1	3	1	3	1	3	2		Flink	7	Spark	Java	1	1	2	3	3	2	0	3	1	4		Flink	13
66	M.I.T.,M.I.T.M.	4	2	2	2	Java	3	2	3	3	3	2	1	1	2	3		7	Spark	Java	2	1	2	3	3	3	2	1	1	1		Hadoop MapReduce	13	Flink	Java	1	2	2	1	2	1	1	1	1	2	the principle of some methods are very tricky	Hadoop MapReduce	13
67	M.I.T.,M.I.T.M.	1	3	2	2	Java	3	2	1	3	3	3	1	1	1	3	the whole structure of hadoop is not  easy to learn	7	Spark	Python	3	2	1	3	3	2	1	3	2	4		Spark	11	Flink	Java	3	3	2	3	3	2	3	3	2	3		Spark	11
68	M.I.T.	4	4	4	3	Java	3	2	2	2	2	3	2	3	2	2	no	7	Spark	Java	1	1	1	2	2	3	2	2	2	3		Hadoop MapReduce	13	Flink	Java	3	3	3	3	4	1	3	4	4	3	Some assignment don't have enough time to complete it, because meanwhile there have other units assignment, also the due data is pretty similar.	Flink	10
69	Grad.Dip.IT	1	2	2	3	Python	2	2	3	1	2	1	2	1	2	3	Is there any "correct" answer for the assignment 1? I think it will be better for us to review if we can access to the "correct" answer.	4	Flink	Java	3	2	3	3	2	2	1	2	1	3		Flink	13	Spark	Python	1	2	3	2	3	2	2	1	2	3		Spark	8